from pyrogram import Client, filters
from pyrogram.types import Message
from pyrogram.errors import FloodWait
from datetime import datetime, time, timedelta
import asyncio
import os

# –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ
api_id = int(os.environ ["api_id"])
api_hash = os.environ ["api_hash"]

# ID —á–∞—Ç–∞ –∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
chat_id = int(os.environ ["chat_id"]) #–ü–æ–º–µ–Ω—è—Ç—å –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤
user_id = int(os.environ ["user_id"]) #–ü–æ–º–µ–Ω—è—Ç—å –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤
app = Client("my_account", api_id=api_id, api_hash=api_hash)

# –í—Ä–µ–º—è, –≤ –∫–æ—Ç–æ—Ä–æ–µ –±–æ—Ç –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å (8:55 –¥–æ 9:15)
start_time = time(15, 45) #–ü–æ–º–µ–Ω—è—Ç—å –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤ / UTC TIME
end_time = time(18, 30)   #–ü–æ–º–µ–Ω—è—Ç—å –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤ / UTC TIME
message_start_time = time(17, 30) #–ü–æ–º–µ–Ω—è—Ç—å –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤ / –ù–∞—à–µ –≤—Ä–µ–º—è
message_end_time = time(20, 30)   #–ü–æ–º–µ–Ω—è—Ç—å –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤ / –ù–∞—à–µ –≤—Ä–µ–º—è

# –î–Ω–∏ –Ω–µ–¥–µ–ª–∏ (—Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ –ø–æ –ø—è—Ç–Ω–∏—Ü—É)
allowed_weekdays = {0, 1, 2, 3, 4}

# –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –Ω—É–∂–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
def is_in_time_range():
    now = datetime.now().time()
    today = datetime.now().weekday()
    return start_time <= now <= end_time and today in allowed_weekdays

# –ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –Ω—É–∂–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
def is_message_today_and_in_time_range(message_time):
    now = datetime.now()
    return message_time.date() == now.date() and message_start_time <= message_time.time() <= message_end_time

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
async def check_likes_and_respond():
        if is_in_time_range():
            async for message in app.get_chat_history(chat_id, limit=100):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –Ω—É–∂–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if message.from_user and message.from_user.id == user_id:
                    if is_message_today_and_in_time_range(message.date):
                        reactions = message.reactions
                        if reactions:
                            for reaction in reactions.reactions:
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∞–∫—Ü–∏–π –±–æ–ª—å—à–µ 12
                                if reaction.count >= 12: #–ü–æ–º–µ–Ω—è—Ç—å –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤
                                    '''if reaction.emoji == "üëç":
                                        print(f"{datetime.now().strftime('%Y.%m.%d %H:%M')} - –Ø —É–∂–µ –ø–æ—Å—Ç–∞–≤–∏–ª —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
                                        return "DONE"  # –ï—Å–ª–∏ —è —É–∂–µ –ø–æ—Å—Ç–∞–≤–∏–ª —Ä–µ–∞–∫—Ü–∏—é, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
                                    else:'''
                                await app.send_reaction(chat_id, message.id, "üëç")  # –°—Ç–∞–≤–∏–º —Ä–µ–∞–∫—Ü–∏—é
                                print(f"{datetime.now().strftime('%Y.%m.%d %H:%M')} - –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∞–∫—Ü–∏–µ–π –Ω–∞–π–¥–µ–Ω–æ, –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –ª–∞–π–∫.")
                                return "DONE"  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
            return None
                              
async def main():
    await app.start()  # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    print (is_in_time_range())
    sended_reaction = 0
    while (is_in_time_range() and sended_reaction == 0):
        result = await check_likes_and_respond()  # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        if result == "DONE":
            print(f"{datetime.now().strftime('%Y.%m.%d %H:%M')} - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è.")
            sended_reaction = 1
        else:
            print(f"{datetime.now().strftime('%Y.%m.%d %H:%M')} - –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ—Ç.")
            await asyncio.sleep(60) #–ü–æ–º–µ–Ω—è—Ç—å –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤
    
    now = datetime.now()
    next_run_time_1 = datetime.combine(now.date(), start_time)
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å –≤ 8:55
    if now.weekday() == 4:
        next_day = now + timedelta(days=3)
    else:
        next_day = now + timedelta(days=1)
    next_run_time_2 = datetime.combine(next_day.date(), start_time)
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É
    if now > next_run_time_1:
        wait_time = (next_run_time_2 - now).total_seconds()
        print(f"–û–∂–∏–¥–∞–Ω–∏–µ –¥–æ {next_run_time_2.strftime('%Y-%m-%d %H:%M')} ({wait_time} —Å–µ–∫—É–Ω–¥).")
    else:
        wait_time = (next_run_time_1 - now).total_seconds()
        print(f"–û–∂–∏–¥–∞–Ω–∏–µ –¥–æ {next_run_time_1.strftime('%Y-%m-%d %H:%M')} ({wait_time} —Å–µ–∫—É–Ω–¥).")
    await asyncio.sleep(wait_time)  #–ñ–¥–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏


if __name__ == "__main__":
    app.run(main())