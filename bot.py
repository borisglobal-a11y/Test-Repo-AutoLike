from pyrogram import Client, filters
from pyrogram.types import Message
from pyrogram.errors import FloodWait
from datetime import datetime, time, timedelta
import logging
import logging.handlers
import asyncio
import os
import sys
import random

# –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ
api_id = int(os.environ ["api_id"])
api_hash = os.environ ["api_hash"]

# ID —á–∞—Ç–∞ –∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
chat_id = int(os.environ ["chat_id"]) #–ü–æ–º–µ–Ω—è—Ç—å –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤
user_ids = [int(uid.strip()) for uid in os.environ["user_id"].split(",")]

# –í—Ä–µ–º—è, –≤ –∫–æ—Ç–æ—Ä–æ–µ –±–æ—Ç –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å (8:40 –¥–æ 9:30)
start_time = time(8, 55) #–ü–æ–º–µ–Ω—è—Ç—å –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤ / –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å UTC TIME –¥–ª—è Github (5,55 - –õ–µ—Ç–Ω–µ–µ, 6,55 - –ó–∏–º–Ω–µ–µ) / –ù–∞—à–µ –≤—Ä–µ–º—è —Å—Ç–æ–∏—Ç, –ø—Ä–æ–ø–∏—Å–∞–Ω–∞ Timezone
end_time = time(18, 30)   #–ü–æ–º–µ–Ω—è—Ç—å –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤ / –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å UTC TIME –¥–ª—è Github (6,30 - –õ–µ—Ç–Ω–µ–µ, 7,30 - –ó–∏–º–Ω–µ–µ) / –ù–∞—à–µ –≤—Ä–µ–º—è —Å—Ç–æ–∏—Ç, –ø—Ä–æ–ø–∏—Å–∞–Ω–∞ Timezone
message_start_time = time(7, 45) #–ü–æ–º–µ–Ω—è—Ç—å –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤ / –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å UTC TIME –¥–ª—è Github (5,20 - –õ–µ—Ç–Ω–µ–µ, 6,20 - –ó–∏–º–Ω–µ–µ)  / –ù–∞—à–µ –≤—Ä–µ–º—è —Å—Ç–æ–∏—Ç, –ø—Ä–æ–ø–∏—Å–∞–Ω–∞ Timezone
message_end_time = time(9, 30)   #–ü–æ–º–µ–Ω—è—Ç—å –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤ / –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å UTC TIME –¥–ª—è Github (6,30 - –õ–µ—Ç–Ω–µ–µ, 7,30 - –ó–∏–º–Ω–µ–µ) / –ù–∞—à–µ –≤—Ä–µ–º—è —Å—Ç–æ–∏—Ç, –ø—Ä–æ–ø–∏—Å–∞–Ω–∞ Timezone

'''
# –î–Ω–∏ –Ω–µ–¥–µ–ª–∏ (—Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ –ø–æ –ø—è—Ç–Ω–∏—Ü—É)
allowed_weekdays = {0, 1, 2, 3, 4}
'''

#–î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)
logger_file_handler = logging.handlers.RotatingFileHandler(
    "status.log",
    maxBytes=1024 * 1024,
    backupCount=1,
    encoding="utf8",
)
formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")
logger_file_handler.setFormatter(formatter)
logger.addHandler(logger_file_handler)


app = Client("my_account", api_id=api_id, api_hash=api_hash)

# –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –Ω—É–∂–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
def is_in_time_range():
    now = datetime.now().time()
    #today = datetime.now().weekday()
    #return start_time <= now <= end_time and today in allowed_weekdays
    return start_time <= now <= end_time

# –ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –Ω—É–∂–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
def is_message_today_and_in_time_range(message_time):
    now = datetime.now()
    return message_time.date() == now.date() and message_start_time <= message_time.time() <= message_end_time

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
async def check_likes_and_respond():
        if is_in_time_range():
            messages = []
            async for message in app.get_chat_history(chat_id, limit=100):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –Ω—É–∂–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if message.from_user and message.from_user.id in user_ids:
                    if is_message_today_and_in_time_range(message.date):
                        messages.append(message)
            for message in reversed(messages):
                if message.reactions:            
                    for reaction in message.reactions.reactions:
                        if reaction.count >= 12:  # –ü–æ—Ä–æ–≥ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∞–∫—Ü–∏–π
                            await app.send_reaction(chat_id, message.id, "üëç")
                            print(f"{datetime.now().strftime('%Y.%m.%d %H:%M')} - –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∞–∫—Ü–∏–µ–π –Ω–∞–π–¥–µ–Ω–æ, –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –ª–∞–π–∫.")
                            logger.info(f'(UA Time) | –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∞–∫—Ü–∏–µ–π –Ω–∞–π–¥–µ–Ω–æ, –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –ª–∞–π–∫.')
                            return "DONE"
                        '''
                        reactions = message.reactions
                        if reactions:
                            for reaction in reactions.reactions:
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∞–∫—Ü–∏–π –±–æ–ª—å—à–µ 15
                                if reaction.count >= 15: #–ü–æ–º–µ–Ω—è—Ç—å –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤
                                    ''''''if reaction.emoji == "üëç":
                                        print(f"{datetime.now().strftime('%Y.%m.%d %H:%M')} - –Ø —É–∂–µ –ø–æ—Å—Ç–∞–≤–∏–ª —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
                                        return "DONE"  # –ï—Å–ª–∏ —è —É–∂–µ –ø–æ—Å—Ç–∞–≤–∏–ª —Ä–µ–∞–∫—Ü–∏—é, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
                                    else:''''''
                                await app.send_reaction(chat_id, message.id, "üëç")  # –°—Ç–∞–≤–∏–º —Ä–µ–∞–∫—Ü–∏—é
                                print(f"{datetime.now().strftime('%Y.%m.%d %H:%M')} - –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∞–∫—Ü–∏–µ–π –Ω–∞–π–¥–µ–Ω–æ, –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –ª–∞–π–∫.")
                                logger.info(f'(UA Time) | –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∞–∫—Ü–∏–µ–π –Ω–∞–π–¥–µ–Ω–æ, –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –ª–∞–π–∫.')
                                return "DONE"  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
                        '''
            return None
                              
async def main():
    await app.start()  # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    '''
    if is_in_time_range() == 0:
        print(f"{datetime.now().strftime('%Y.%m.%d %H:%M')} - –ï—â–µ –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª–æ –≤—Ä–µ–º—è –¥–ª—è —Ä–∞–±–æ—Ç—ã.")
        logger.info(f'(UA Time) | –ï—â–µ –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª–æ –≤—Ä–µ–º—è –¥–ª—è —Ä–∞–±–æ—Ç—ã.')
    else:
        print(f"{datetime.now().strftime('%Y.%m.%d %H:%M')} - –í—Ä–µ–º—è –Ω–∞—Å—Ç—É–ø–∏–ª–æ.")
        logger.info(f'(UA Time) | –í—Ä–µ–º—è –Ω–∞—Å—Ç—É–ø–∏–ª–æ.')
     '''
    sended_reaction = 0

    #–≠–ª–µ–º–µ–Ω—Ç —Ä–∞–Ω–¥–æ–º–∞
    times = [60, 120, 180, 240, 300, 360] # –í–∞—Ä–∏–∞–Ω—Ç—ã –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    weights = [0.10, 0.15, 0.25, 0.25, 0.15, 0.10] # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ (–¥–æ–ª–∂–Ω—ã –≤ —Å—É–º–º–µ –¥–∞–≤–∞—Ç—å 1, –Ω–æ –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –≤ –≤–µ—Å–∞—Ö)
    wait_seconds = random.choices(times, weights, k=1)[0] # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—è–º–∏

    print(f"{datetime.now().strftime('%Y.%m.%d %H:%M')} - –û–∂–∏–¥–∞–Ω–∏–µ {wait_seconds // 60} –º–∏–Ω—É—Ç...")
    logger.info(f'(UA Time) | –û–∂–∏–¥–∞–Ω–∏–µ {wait_seconds // 60} –º–∏–Ω—É—Ç...')
    await asyncio.sleep(wait_seconds) #–ü–æ–º–µ–Ω—è—Ç—å –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤
    print(f"{datetime.now().strftime('%Y.%m.%d %H:%M')} - –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ!")
    logger.info(f'(UA Time) | –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ!')

    while (is_in_time_range() and sended_reaction == 0):
        result = await check_likes_and_respond()  # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        if result == "DONE":
            print(f"{datetime.now().strftime('%Y.%m.%d %H:%M')} - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è.")
            logger.info(f'(UA Time) | –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è.')
            sended_reaction = 1
        else:
            print(f"{datetime.now().strftime('%Y.%m.%d %H:%M')} - –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ—Ç.")
            logger.info(f'(UA Time) | –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ—Ç.')
            await asyncio.sleep(60) #–ü–æ–º–µ–Ω—è—Ç—å –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤
    
if __name__ == "__main__":
    app.run(main())

'''
    now = datetime.now()

    if now.weekday() == 4:
        next_day = now + timedelta(days=3)
    else:
        if now.weekday() == 5:
            next_day = now + timedelta(days=2)
        else:
            if now.weekday() == 6:
                next_day = now + timedelta(days=1)
            else:
                next_day = now + timedelta(days=0)

    next_run_time_1 = datetime.combine(next_day.date(), start_time)

    if now.weekday() == 4:
        next_day = now + timedelta(days=3)
    else:
        if now.weekday() == 5:
            next_day = now + timedelta(days=2)
        else:
            next_day = now + timedelta(days=1)
            
    next_run_time_2 = datetime.combine(next_day.date(), start_time)
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É
    if now > next_run_time_1:
        wait_time = (next_run_time_2 - now).total_seconds()
        print(f"–û–∂–∏–¥–∞–Ω–∏–µ –¥–æ {next_run_time_2.strftime('%Y-%m-%d %H:%M')} ({wait_time} —Å–µ–∫—É–Ω–¥).")
        logger.info(f'(UA Time) | –û–∂–∏–¥–∞–Ω–∏–µ –¥–æ {next_run_time_2.strftime("%Y-%m-%d %H:%M")} ({wait_time} —Å–µ–∫—É–Ω–¥).')
    else:
        wait_time = (next_run_time_1 - now).total_seconds()
        print(f"–û–∂–∏–¥–∞–Ω–∏–µ –¥–æ {next_run_time_1.strftime('%Y-%m-%d %H:%M')} ({wait_time} —Å–µ–∫—É–Ω–¥).")
        logger.info(f'(UA Time) | –û–∂–∏–¥–∞–Ω–∏–µ –¥–æ {next_run_time_1.strftime("%Y-%m-%d %H:%M")} ({wait_time} —Å–µ–∫—É–Ω–¥).')
    sys.exit(0)
    #await asyncio.sleep(wait_time)  #–ñ–¥–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
'''